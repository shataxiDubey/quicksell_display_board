{"version":3,"sources":["components/board.js","App.js","reportWebVitals.js","index.js"],"names":["priorityMapping","4","3","2","1","0","priorityImages","statusImages","Todo","Inprogress","Backlog","KanbanBoard","tickets","setTickets","useState","users","setUsers","grouping","setGrouping","sorting","setSorting","groupedTickets","setGroupedTickets","isDropdownVisible","setIsDropdownVisible","useEffect","async","response","axios","get","fetchedTickets","fetchedUsers","data","enhancedTickets","map","ticket","user","find","u","id","userId","userName","name","error","console","fetchData","key","log","grouped","reduce","result","groupKey","push","groupData","React","createElement","className","onClick","src","value","onChange","e","target","Object","keys","Fragment","alt","length","replace","sort","a","b","priority","title","localeCompare","sortTickets","tag","App","Board","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9220b6d0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./board.css\";\r\n\r\nconst priorityMapping = {\r\n    4: \"Urgent\",\r\n    3: \"High\",\r\n    2: \"Medium\",\r\n    1: \"Low\",\r\n    0: \"No priority\",\r\n  };\r\n\r\n  const priorityImages = {\r\n    4: `${process.env.PUBLIC_URL}/icons_FEtask/SVG - Urgent Priority colour.svg`,\r\n    3: `${process.env.PUBLIC_URL}/icons_FEtask/Img - High Priority.svg`,\r\n    2: `${process.env.PUBLIC_URL}/icons_FEtask/Img - Medium Priority.svg`,\r\n    1: `${process.env.PUBLIC_URL}/icons_FEtask/Img - Low Priority.svg`,\r\n    0: `${process.env.PUBLIC_URL}/icons_FEtask/No-priority.svg`,\r\n  };\r\n\r\n  const statusImages = {\r\n    'Todo': `${process.env.PUBLIC_URL}/icons_FEtask/To-do.svg`,\r\n    'Inprogress': `${process.env.PUBLIC_URL}/icons_FEtask/in-progress.svg`,\r\n    'Backlog': `${process.env.PUBLIC_URL}/icons_FEtask/Backlog.svg`\r\n  };\r\n\r\n  \r\n\r\nconst KanbanBoard = () => {\r\n  const [tickets, setTickets] = useState([]);\r\n  const [users, setUsers] = useState([]); // Store users data\r\n  const [grouping, setGrouping] = useState(\"status\"); // Default: none selected\r\n  const [sorting, setSorting] = useState(\"\"); // Default: none selected\r\n  const [groupedTickets, setGroupedTickets] = useState({});\r\n  const [isDropdownVisible, setIsDropdownVisible] = useState(false);\r\n\r\n  // Fetch data from the API\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          \"https://api.quicksell.co/v1/internal/frontend-assignment\"\r\n        );\r\n\r\n        const { tickets: fetchedTickets, users: fetchedUsers } = response.data;\r\n\r\n        // Map user names to tickets\r\n        const enhancedTickets = fetchedTickets.map((ticket) => {\r\n          const user = fetchedUsers.find((u) => u.id === ticket.userId);\r\n          return {\r\n            ...ticket,\r\n            userName: user ? user.name : \"Unknown User\",\r\n          };\r\n        });\r\n\r\n        setTickets(enhancedTickets); // Save enhanced tickets\r\n        setUsers(fetchedUsers); // Save users\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Group tickets dynamically based on the selected grouping option\r\n  useEffect(() => {\r\n    if (!grouping) return; // Skip if no grouping option is selected\r\n\r\n    const groupData = (key) => {\r\n        console.log('key', key)\r\n      const grouped = tickets.reduce((result, ticket) => {\r\n        console.log('result', result)\r\n        const groupKey = ticket[key];\r\n        if (!result[groupKey]) {\r\n          result[groupKey] = [];\r\n        }\r\n        result[groupKey].push(ticket);\r\n        return result;\r\n      }, {});\r\n      setGroupedTickets(grouped);\r\n    };\r\n    \r\n    groupData(grouping === \"user\" ? \"userName\" : grouping);\r\n  }, [grouping, tickets]);\r\n\r\n  // Sort tickets within groups\r\n  const sortTickets = (tickets) => {\r\n    if (!sorting) return tickets; // Return unsorted if no sorting is selected\r\n\r\n    return [...tickets].sort((a, b) => {\r\n      if (sorting === \"priority\") {\r\n        return b.priority - a.priority;\r\n      } else if (sorting === \"title\") {\r\n        return a.title.localeCompare(b.title);\r\n      }\r\n      return 0;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"kanban-board\">\r\n      <button\r\n        className=\"beautiful-button\"\r\n        onClick={() => setIsDropdownVisible(!isDropdownVisible)}\r\n      >\r\n        <img src ={`${process.env.PUBLIC_URL}/icons_FEtask/Display.svg`} className='display-icon'></img>\r\n        Display \r\n        <img src ={`${process.env.PUBLIC_URL}/icons_FEtask/down.svg`} className='down-arrow'></img>\r\n      </button>\r\n\r\n      {isDropdownVisible && (\r\n        <div className=\"dropdowns\">\r\n          <div className=\"dropdown\">\r\n            <label>Grouping:</label>\r\n            <select\r\n              value={grouping}\r\n              onChange={(e) => setGrouping(e.target.value)}\r\n            >\r\n              <option value=\"\">Select Grouping</option>\r\n              <option value=\"status\">By Status</option>\r\n              <option value=\"user\">By User</option>\r\n              <option value=\"priority\">By Priority</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"dropdown\">\r\n            <label>Sorting:</label>\r\n            <select\r\n              value={sorting}\r\n              onChange={(e) => setSorting(e.target.value)}\r\n            >\r\n              <option value=\"\">Select Sorting</option>\r\n              <option value=\"priority\">By Priority</option>\r\n              <option value=\"title\">By Title</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"columns\">\r\n        {Object.keys(groupedTickets).map((groupKey) => (\r\n          <div key={groupKey} className=\"column\">\r\n            {console.log('groupKey', groupKey)}\r\n            <h3>\r\n            {grouping === \"priority\" ? (\r\n          <>\r\n            <img \r\n              src={priorityImages[groupKey]} \r\n              alt={priorityMapping[groupKey]} \r\n              className=\"priority-icon\" \r\n            />\r\n            {priorityMapping[groupKey]}\r\n            <span className = \"group-count\">{groupedTickets[groupKey].length}</span>\r\n            <img \r\n              src={`${process.env.PUBLIC_URL}/icons_FEtask/add.svg`} \r\n              alt='plus sign' \r\n              className=\"plus-icon\" \r\n            />\r\n            <img \r\n              src={`${process.env.PUBLIC_URL}/icons_FEtask/3 dot menu.svg`} \r\n              alt='3 dot sign' \r\n              className=\"3-dot-icon\"\r\n            />\r\n          </>\r\n        ) : ( grouping === \"status\" ? (\r\n            <>\r\n            <img \r\n              src={statusImages[groupKey.replace(/\\s+/g, '')]} \r\n              alt=\"status\" \r\n              className=\"status-icon\" \r\n            />\r\n            {groupKey}\r\n            <span className = \"group-count\">{groupedTickets[groupKey].length}</span>\r\n            <img \r\n              src={`${process.env.PUBLIC_URL}/icons_FEtask/add.svg`} \r\n              alt='plus sign' \r\n              className=\"plus-icon\" \r\n            />\r\n            <img \r\n              src={`${process.env.PUBLIC_URL}/icons_FEtask/3 dot menu.svg`} \r\n              alt='3 dot sign' \r\n              className=\"3-dot-icon\"\r\n            />\r\n          </>\r\n        ) :\r\n        <>\r\n        <img \r\n          src={`${process.env.PUBLIC_URL}/logo192.png`} \r\n          alt=\"status\" \r\n          className=\"user-icon\" \r\n        />\r\n        {groupKey}\r\n        <span className = \"group-count\">{groupedTickets[groupKey].length}</span>\r\n        <img \r\n              src={`${process.env.PUBLIC_URL}/icons_FEtask/add.svg`} \r\n              alt='plus sign' \r\n              className=\"plus-icon\" \r\n            />\r\n        <img \r\n              src={`${process.env.PUBLIC_URL}/icons_FEtask/3 dot menu.svg`} \r\n              alt='3 dot sign' \r\n              className=\"3-dot-icon\"\r\n            />\r\n      </>\r\n        )}\r\n        </h3>\r\n            {sortTickets(groupedTickets[groupKey]).map((ticket) => (\r\n              <div key={ticket.id} className=\"card\">\r\n                <h4 className = 'ticketId'>{ticket.id}</h4>\r\n                {groupKey !== ticket.userName && <img \r\n                src={`${process.env.PUBLIC_URL}/logo192.png`} \r\n                alt=\"status\"\r\n                className=\"profile-icon\" \r\n                />}\r\n                <h4>{ticket.title}</h4>\r\n                {groupKey !== ticket.priority && <> <img \r\n                src={priorityImages[ticket.priority]} \r\n                alt={priorityMapping[ticket.priority]} \r\n                className=\"priority-icon\" \r\n                />\r\n                {ticket.tag}\r\n                </>}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanBoard;\r\n","import React from \"react\";\nimport Board from \"./components/board\";\n\nfunction App() {\n  return (\n    <div>\n      {/* <h1>Interactive Kanban Board</h1> */}\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}